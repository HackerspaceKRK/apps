version: '3.8'

services:
  traefik:
    image: traefik:v2.8
    container_name: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
      - "8080:8080"
    depends_on:
      - authentik
    command:
      - "--api"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:8000"
      - "--api.insecure=true"
      - "--providers.docker.swarmMode=true"
      - "--entryPoints.web.forwardedHeaders.trustedIPs=10.0.0.0/16"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=system_default"
        - "traefik.port=80"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        - "traefik.http.routers.traefik.rule=Host(`traefik.apps.hskrk.pl`)"
        - "traefik.http.routers.traefik.middlewares=authentik@docker"

  authentik:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.6.1}
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_SECRET_KEY: file:///run/secrets/authentik_token
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:-pass}
    env_file:
      - .env
    ports:
      - "9000:9000"
    depends_on:
      - postgresql
      - redis
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=system_default"
        - "traefik.http.services.authentik.loadbalancer.server.port=9000"
        - "traefik.http.routers.authentik.rule=Host(`auth.apps.hskrk.pl`)"
    secrets:
      - authentik_token

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.6.1}
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:-pass}
      AUTHENTIK_SECRET_KEY: file:///run/secrets/authentik_token
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    secrets:
      - authentik_token

  authentik-proxy:
    image: ghcr.io/goauthentik/proxy
    ports:
      - "9091:9000"
    environment:
      - AUTHENTIK_HOST=http://authentik:9000
      - AUTHENTIK_INSECURE=true
      - AUTHENTIK_TOKEN=file:///run/secrets/authentik_token
      - AUTHENTIK_HOST_BROWSER=https://auth.apps.hskrk.pl
      - AUTHENTIK_DEBUG=true
    depends_on:
      - authentik
    deploy:
      labels:
        - "traefik.docker.network=system_default"
        - "traefik.enable=true"
        - "traefik.http.services.authentik-proxy.loadbalancer.server.port=9000"
        - "traefik.http.routers.authentik-proxy.rule=Host(`whoami.apps.hskrk.pl`) && PathPrefix(`/outpost.goauthentik.io/`)"
        - "traefik.http.middlewares.authentik.forwardauth.address=http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik"
        - "traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true"
        - "traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"
    secrets:
      - authentik_token

  whoami:
    image: containous/whoami
    depends_on:
      - authentik-proxy
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=system_default"
        - "traefik.port=80"
        - "traefik.http.services.whoami.loadbalancer.server.port=80"
        - "traefik.http.routers.whoami.rule=Host(`whoami.apps.hskrk.pl`)"
        - "traefik.http.routers.whoami.middlewares=authentik@docker"

  postgresql:
    image: postgres:12-alpine
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:-pass}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}

  redis:
    image: redis:alpine
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  swarm-cronjob:
    image: crazymax/swarm-cronjob
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - "TZ=Europe/Warsaw"
      - "LOG_LEVEL=info"
      - "LOG_JSON=false"
    deploy:
      placement:
        constraints:
          - node.role == manager

  restic-backup:
    image: restic/restic:latest
    secrets:
       - restic_password
       - source: backblaze_credentials
         target: /root/.aws/credentials
    environment:
      - RESTIC_REPOSITORY=${RESTIC_REPOSITORY}
      - RESTIC_PASSWORD_FILE=/run/secrets/restic_password
    volumes:
      - /var/lib/docker/volumes/:/data
    command:
      - backup
      - /data
    deploy:
      mode: replicated
      replicas: 0
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=10 18 * * *"
        - "swarm.cronjob.skip-running=false"
      restart_policy:
        condition: none

volumes:
  database:

secrets:
  pg_pass:
    external: true
  authentik_token:
    external: true
  restic_password:
    external: true
  backblaze_credentials:
    external: true