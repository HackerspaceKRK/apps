version: "3.7"
services:
  db:
    image: postgres:15.4
    restart: unless-stopped
    volumes:
      - spejstore-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB} #TODO CHANGE
    healthcheck:
      #CHANGE 1: this command checks if the database is ready, right on the source db server
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 1s
      timeout: 1s
      retries: 5
  web:
    image: ghcr.io/hackerspacekrk/spejstore:latest
    restart: always
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    networks:
      - system_default
      - spejstore
    secrets:
      - spejstore_clientid
      - spejstore_secret
    environment:
      SPEJSTORE_CLIENT_ID: ${SPEJSTORE_CLIENTID}
      SPEJSTORE_SECRET: ${SPEJSTORE_SECRET}
      SPEJSTORE_DB_NAME: ${POSTGRES_NAME}
      SPEJSTORE_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SPEJSTORE_DB_USER: ${POSTGRES_USER}
      SPEJSTORE_DB_HOST: ${POSTGRES_DB}
      SPEJSTORE_ALLOWED_HOSTS: ${SPEJSTORE_ALLOWED_HOSTS}
      SPEJSTORE_ENV: ${SPEJSTORE_ENV}
    depends_on:
      - db
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=system_default"
        - "traefik.http.services.spejstore.loadbalancer.server.port=8000"
        - "traefik.http.routers.spejstore.rule=Host(`spejstore.apps.hskrk.pl`)"
        - "traefik.http.routers.spejstore.tls=true"
        - "traefik.http.routers.spejstore.tls.certresolver=myresolver"

volumes:
  spejstore-db:

secrets:
  spejstore_secret:
    external: true
  spejstore_clientid:
    external: true

networks:
  system_default:
    external: true
  spejstore:
